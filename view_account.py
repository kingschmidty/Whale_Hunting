import networkx as nx
import pandas as pd
from pyvis.network import Network

accounts=   ['N2C374IRX7HEX2YEQWJBTRSVRHRUV4ZSF76S54WV4COTHRUNYRCI47R3WU',
            '5NJXLZJZ4UFDGCIKFC4KUSOOJKC6HTC4T6G26OSPFCWF4UQVTZ5RIW5H6I',
            'TIPERHIFNSXETGLYQVK7VWIKYVNPOUYNMEOYHRESBKNBTBQHITNUS2E3GE',
            'QZL25DVJ4A52D2EBT46LZPUNXBLLEC643XQKTSVPY4TWKGFW4S3ZWTZ7UE',
            '42HAVABFWPPPNUXS43OZW5EP6KAXIEK7WMJAXTO2AFCXG65E33JOUTCQTY',
            'HEVIA5G6Y3J5GVPADLCJILAQOBEHSTURMNUQAP4KM2ENSI3KXSPR2YEI3U',
            '7BZEUIEPHZGDK6E673DVOY6BVCCZC6YFAJ3QWROPBZK5XKGE5GUWDYZRUY',
            '67K5NBQAHRIALTLMUNYSPZOHJNEYMKUNR45J3WOULVSNXJAKSI74NBJHR4',
            'V6OKGHACKENDX3PXUN4WD2LJ2GYM6W7ASNO7JFKT2RXU2OFOHWJQO3ZJYI',
            'PIQXVMTNQZDUCNDL7ESLLICP32YKCSXOEK3FXOO3M7USYUC7VHW6BEELTU',
            '6LKC2LM25IIU4G27YURU3WFFZSEUYOEO56SEUUPL2C4WK52X3WJPUNGYKI',
            '22IPAUMSR6Y65HUO3OQ3XLFADSSZTJ7FUUFGUX7OUS2IKBFJO5CDJ7QBFQ',
            '7HJ7M34IZRYB53BDS2PYHJIBZRKDEYXFB5TC6FD56J6BMJRYCTRNIEZG2I',
            '7LAMFBW4NJVUJB2NZ6XZRCIWORVF7DF6IZBWUZHXSL4I6GM7HTHCMNCLAA',
            'WWLWEBRO2CD5UIV4XNQUB6VLODWFB5QERCF7BS2H73JXSJAAVKPHE3JSY4',
            'QFSCXCWOACMYLX6C5EGTH4VW6ADMBJSFVXCQIWXGVUGFZ5VYNZTS3ZCQRQ',
            'COO7YAEA2OHJ5RXWSNWEB62GBOKUJMLGGFZR6O7WG5EWV4YRJVXNRGOHJE',
            'BFU3RJUUBUYTDP4FSMKC5GY5AA2PTPDGZX5K4ONT2RUXB2VSSXD5YB2FOY',
            'YQB5AH5SGT7IFA7DQICODI6355PIUE4OLEJWREFKDNFTJTCZ6ZJBZLBPQI',
            'YJATLZ56QKUJ5WM2LZBLERADQPUNFOVZK65BHQ3EVCSUKN6ROD3GWJBBH4',
            '4KTFXKKCYSMD347HJVG5QTBECVB6SPZ4IH3JCWHPAPT7A3RVFHNZKMXLSU',
            'VSFE76W7BPZPURIPYS6EBKT3BBDWDKJ2HDNEKHHKNRSKROISF3G3BWLQEM',
            'OKHEI2TFHACIMFDCP3WAMJRK6BL33EDAWVHZE7RWF4V2BKLEWHENX4EFB4',
            'WPNEMYN7MBNJU2ZJI6IBZFXHCI3JMT5KDQS3ZKSM7I7CWHJJBKQMXRY4RI',
            'GXH7J3JWWAZLAHWJPBIVVXSNV52S35NALXPUKEEVPJXOJK5LZBRJPNSDHU',
            '7ZC2JOTHFKKVMKKZQPQQP52QZ3H2ECMTWXV4ZXGQT2MWKNRCTS3X7BBFXY',
            'OU5XUN4SOIQVKALFAWWEJS7P3HJ4CARHT3DKCXCY2B7ABMLZ5GJ5H6G73Y',
            'VADHW2W4EPK47Q4DIGBVHONEWZYXO4OGFMK4SRRU5CANZZSDRW76I4S42Q',
            '556HS5I22H24DU66HYHRJFKVD5VU3JVUXYTDYRTEJQWODMRG5JOX2RGNVE',
            'NZQY7JILU6JHTH5DZ3UT6KPEUYSY2VBCEMRR4WTGJOALSRGRYVDHZUWAKI',
            'FWRE7I326G4VU7CWWGQXLDQ3M4F3M5AA6LINQ4R3N4DTMYIINWRUVX6DVI',
            '6VT5ZAGCP63NQX6U7JED3EX7PFZUT5R4EEAZNP2ASPUWDR6FFYU5C3A3P4',
            'TT2IU7SCJJI757LY3A6CWO6QSRXPQANCZYXINIRH7DT6E4XZGA4JTYNWWI',
            'APXHY6QSNYFRMP3L6LXBLR2KUYCATXECFDGFNT2BHHF3WEGWF2HEI3SCGI',
            'C4MHDOXZMCAYRZNIA3W6YV72LU56LIEYUXFZJWIMF5YBOGZ2BTHMG6LFJM',
            '3HZ7I7HVZRQ3DVAXE27TGIIB5DDHDKK3R54MER4I2HMKF7UIVV3S2RAKPU',
            'SFPIF5JSKERPJTOJG5EJCM3TGUN3U7VMWTCISX4MJG4DO3MLT2PIF64G54',
            'R56MXCZ75FMMQJDBNHQ2IPLEONPRSYM3HLG3UTOYJU3AHGRWRF24D5CJGE',
            'O2QUJIB5M6OZ323YRLJVPD7XXUFQIG5JJONQSORDKOLQXK6DRVDON7QNQY',
            'B6X244MFHR3DHJSJSWQ5Z3NY5NQDSAZE54JNXNMKGNEG6K2CB2YR63HH4Q',
            'IUZYTZAQE36EUGFRFFC2ZOMEP4F67XXTO7SHPSLBHEMNJY2FWF67VPVEOM',
            'KGXFB4Z7VHNULSGUL4LNVSU6IRTAYKYJVRD4USH3JCOA5H5U4IZYI7O3OQ',
            'KBY6HTRKY2QJSSRJ643AVG4XM3X7XSBLAOFXVETROM3ZUIFPJ3YMC5K4ZU',
            'F2RE6L6LTEVLMH2OBU3ZRRZYU4GKMNN4DIGG3JML3ZNCVKOSCFRQXSESE4',
            'TYCI3BROSM5Y6VKTIBGE7V2C5QJHADWJLLO6VJM6A2UPHXWCMCXP3MXRZQ',
            '6BQTVEWPUF7X5BCQBK62BCBTOE3GBGFOYGTE5V25G2GFLKIO6E4V4PWGKA',
            'DNAI7JYA45Y35TJ6QOH5DRWM65GRZG2WVISZH4LUB35TWY54N3EYVYB6FI',
            'DDO3DTA2U5JMKDEGOPKHWWGFC7SZGJCYEDXDULM6HHQVFDQRJBMLRM3IKA',
            '6TJOUX5BRCPMJUUNKFDMYAH67CDNWVE7CGG7A2G73GF5NYZVG5C4CMOE3E',
            '2IO55JHGCZYI2VYHZ6565TH7XOJTTGQRMBDD2MXR77DL3NE6NBN2PQNQQI',
            'GH27QMBSQZF3O6J7SGXQRQMUQD264HNXZ7R6OXDPIOR5XOOE22UBWUXZI4',
            'M7YONBBIBMLPL3PJ56V6NG2BG77OXCYX3HUDLAZGKGUZRHYRAOBYMNRDBM',
            'LZD6QOAYD4HSQEB2Y6FWHFYVRLXT43JVSG6I4SFOBTYVCUQWOR2ZLRFQAU',
            '3CZIQPUK4XM7J4OMY4NRF4REZGHTF5IX4DOZ6C5E2BA4A4O6DSBNC5TEU4',
            '52IE5AQLBCSK3NDWASP5DAOIHCG4KIN37PJHYO7REZSMEXQUNKKDXY7OIU',
            '4SYBACPMDNURFL5NSQWDWN7U6XVSCRHNKCYWC6BHXAOBH4Y6VYXXSKACYE',
            '4QSBCW2HEDILH4XUBE4RXDLOY53GX65JMF4MEFEETA2WBGE24SY6AIM6AQ',
            '3HBBYP2EX4OSUU6RYNJMHRMJDDSNSRDENTHDYQWUR6RZXOERSYOTYPPTZM',
            'XNQON7CQZOQ43GNUSCLNETGB3PP44OESBBQ5R5QHVRVYXHRVK66UUKRWLY',
            'JU6N7QTPFZ4VHWR3UDJKGCAM5FXWVOGE7XGMZVGCFYNAU7KLNVVKRIGCTA',
            'ZLTOJBSWU6B3EJ7M5EWLZ546FA35H36S4ETHZIB4XYMOFFREZB52QTF6VE',
            '6L63JKTLVR7I5S6R6LSXSGPTZ6XAQEDXTH4V5CJXDGCXBTDJJYAUFBIRPE'
            ]
"""
            'TUWEGKET4EGUK6HNPTTRVVV5HHR4A7GGN2PD5ZX5HN2NWIF56YTQWQ4EZQ',
            'RMAMIOHZUGQVHOHCMOOS4XOX3JV2ELEONSQJS5O52CFL3LTV7I7AZRUQME',
            '6DR2OJCILWIFMHMYRXKKRYAJXA5DGNU4YEFJF6NHWDYUSWM55OIBKTTONI',
            'C57ILKNUZ5TLV5CCP5NWG3XAXZDIC7AG2P3SNPL7SP7HDDWEDCM3K5MXXQ',
            'CCLTRSBH55DEB7T7I3VT7LGIVFCVAUZHSLICHNKE4URLVO3DLS7X7JYCJU',
            'EENN3ZZRQ3LYK6DDKJHPGNSZQ277USW6YNDOLSI7O7JE2KXXA5XBMMJ2IM',
            'EFW7A7RLEXRZGY5XNX4NWY6NKL2CNRKBPI73OTTV73VIUWWAKVYEY7XTBI',
            'YODSFHHZLJ42656MBMQSIYDX4XSOEPV6QYP6IHGARMZYU7RJ5FZWP2BANM'
"""
            
exchanges = ['ZVMOZVZJK64NEYDPUDGGC52NI6HOX2LUQVIWYCQTJ2DFXRGPL72C2BQYNM',
            'QYXDGS2XJJT7QNR6EJ2YHNZFONU6ROFM6BKTBNVT63ZXQ5OC6IYSPNDJ4U',
            'SP745JJR4KPRQEXJZHVIEN736LYTL2T2DFMG3OIIFJBV66K73PHNMDCZVM',
            'QD6NSI23VUWBUUT5PJJV7KZ34QEWRIOJJACSYA2OR743RCQQJVLEVZ4WW4',
            'J4AEINCSSLDA7LNBNWM4ZXFCTLTOZT5LG3F5BLMFPJYGFWVCMU37EZI2AM',
            'YXDKDH5XHXL6OYMH2HYCJCXOZWPOBEUNK5ICFVJRFW3JVQXZ6HQ6QPVQVA',
            '3CIPOIS4KLKSA3XOCIRKX2TVUJ2V3F5A4P525VGMFCPGN7QFKDDYUABYOY',
            '6ITEMKNE36NXKWWDL3WBYDHK3T77UY3QDCMBYBC5QMGVDFWEP626JX6CXY',
            'IMGMVBZEPMM36AIMWI7FZHG2G44KEESC5ALZHWX7B7SBNBDY6Z7COYMO6U',
            'M3IAMWFYEIJWLWFIIOEDFOLGIVMEOB3F4I3CA4BIAHJENHUUSX63APOXXM',
            'LWUWBZPVBS24TDBDZ72LUYJJF75KUJ3IUP6YGG45PVKGNAJYRGQD5CSCPA',
            'MQOZTXRBYZ6JIPGQLNV6Y4REHFKVZKBXKIJVOGEYUDPLQNYZ5YJP72XZOE',
            '27D6WYEDJZHLFCLJNDJF63RFYFO32KZHOYBHET7BSVDHSTJQQI5GFN2QVI',
            'UXVAPU4KERSMNUILDVZUKKF4KMWQ7RFSSYPXYSEGSYNYILC4FEHISKRBNM',
            'GGYZ6WF74FZXPXPURAXRQ7D52BSJLRTXPPNQGV2RUSAVAT3BAQHNTA33J4',
            'UQ6QRU27R3IKHZ7EBPYKIODBPTD2ST4QUBBJ2QWAGKZ2MLMJODFVQCOF3E',
            'JDQ7EW3VY2ZHK4DKUHMNP35XLFPRJBND6M7SZ7W5RCFDNYAA47OC5IS62I'
            ]
            
exchange_tags = ['Okex',
                'Binance 5',
                'Binance',
                'Huobi 1',
                'Huobi 2',
                'Kucoin 1',
                'Kucoin 4',
                'Bitstamp',
                'Kucoin 3',
                'Mexc',
                'Coinbase',
                'Coinbase 2',
                'Coinbase 3',
                'Coinbase Pro',
                'Bitfinex'
                ]
                

network = {'source':[], 'target':[], 'amount_in':[], 'amount_out':[], 'amount_net':[], 'num_txns':[], 'direction':[]}

for i in accounts:
    csv_name = 'flows-' + i + '.csv'
    temp_df = pd.read_csv(csv_name)
    for index,row in temp_df.iterrows():
        # print(row)
        if (row['Ⱥ In'] > 100000 or row['Ⱥ Out'] > 100000 or row['Txns'] > 10):
            network['source'].append(row['Address'])
            network['target'].append(i)
            if (row['Ⱥ In'] < 10000):
                network['amount_in'].append('10000 or less')
            elif (row['Ⱥ In'] < 100000):
                network['amount_in'].append('10000 to 100000')
            elif (row['Ⱥ In'] < 1000000):
                network['amount_in'].append('100000 to 1000000')
            else:
                network['amount_in'].append('1000000 or greater')
            
            if (row['Ⱥ Out'] < 10000):
                network['amount_out'].append('10000 or less')
            elif (row['Ⱥ Out'] < 100000):
                network['amount_out'].append('10000 to 100000')
            elif (row['Ⱥ Out'] < 1000000):
                network['amount_out'].append('100000 to 1000000')
            else:
                network['amount_out'].append('1000000 or greater')
            
            if (abs(row['Ⱥ Net']) < 10000):
                network['amount_net'].append('10000 or less')
            elif (abs(row['Ⱥ Net']) < 100000):
                network['amount_net'].append('10000 to 100000')
            elif (abs(row['Ⱥ Net']) < 1000000):
                network['amount_net'].append('100000 to 1000000')
            else:
                network['amount_net'].append('1000000 or greater')

            network['num_txns'].append(row['Txns'])
            network['direction'].append('undirected')
            """
        if (row['Ⱥ Out'] > 10000 and row['Txns'] > 10):
            network['source'].append(i)
            network['target'].append(row['Address'])
            network['amount'].append(row['Ⱥ In'])
            network['num_txns'].append(row['Txns'])
            network['direction'].append('directed')
            """

df = pd.DataFrame(network)

G = nx.from_pandas_edgelist(df, source='source', target='target', edge_attr=['amount_in', 'amount_out', 'amount_net', 'num_txns', 'direction'])

for i in G.nodes:
    if i in exchanges:
        print(i)
        G.nodes[i]["color"]='red'
        G.nodes[i]["label"]='exchange'
    if i == 'N2C374IRX7HEX2YEQWJBTRSVRHRUV4ZSF76S54WV4COTHRUNYRCI47R3WU':
        G.nodes[i]["color"]='black'
        G.nodes[i]["label"]='whale'

net = Network(notebook=True, cdn_resources='remote', directed=False, select_menu=True, filter_menu=True)

net.from_nx(G)

net.show_buttons(filter_=['physics'])
net.show('whale.html')